get_results_plot(at.large.results) |> print()
get_results_plot <- function(rcv.results.to.plot, position = "large_senator", seats = 4){
# Tabulate results for each individual race
# every.result (tbl): long df of all results to pass to pivoted.results()
# position (str): name of position
# -> output (csv): output of vote::RCV() giving round results and winners
# -> results_plot (png): bar graph showing actions for each round
# Get cutoffs for each round
cutoffs <- tibble(cutoff = rcv.results.to.plot$quotas) |>
rowid_to_column(var = "stage")
# Create table of results and join to cutoffs
stages <- rcv.results.to.plot$preferences |>
as_tibble() |>
rowid_to_column(var = "stage") |>
pivot_longer(-stage) |>
left_join(cutoffs) |>
mutate(vote_delta = value - cutoff)
# Get number of IR rounds for plot title
no.rounds <- stages |> distinct(stage) |> nrow()
# Get number of candidates for plot title
no.candidates <- rcv.results.to.plot$preferences |> colnames() |> length()
# Elected candidates for each round are those candidates whose vote count is largest
# compared to the cutoff
elected <- stages |>
group_by(stage) |>
filter(vote_delta == max(vote_delta)) |>
filter(value > cutoff) |>
select(stage, name) |>
mutate(action = "Elected")
# Eliminated candidates for each round are those whose vote count is smallest
# compared to the cutofff
eliminated <- stages |>
group_by(stage) |>
filter(vote_delta == min(vote_delta)) |>
select(stage, name) |>
mutate(action = "Eliminated")
# Lookup vector for position names for plot title
positions.names <- c(
"International Senator" = "international_senator",
"Fourth Year Senator" = "fourth_senator",
"Third Year Senator" = "third_senator",
"Second Year Senator" = "second_senator",
"At Large Senator" = "large_senator"
)
incumbents <- read_csv("senators23-24.csv", show_col_types = FALSE) |> pull(Name)
# Plot the results
stages <- stages |>
# Join with elected and eliminated tables and create color columns
left_join(elected) |>
left_join(eliminated, by = c("stage", "name")) |>
mutate(color = coalesce(action.x, action.y)) |>
mutate(color = replace_na(color, "None"))  |>
mutate(name = str_replace(name, "Suyash SR", "Suyash-SR")) |>
mutate(name.label = str_split_i(name, pattern = " ", i = 2)) |>
mutate(name.label = case_when(
name %in% elected$name ~ paste0("**", name.label, "**"),
.default = name.label
)) |>
mutate(name.label = case_when(
(name %in% incumbents) ~ paste0(name.label, "&ast;"),
.default = name.label
))
elaborate.subtitle <- paste0(seats, " senators elected from ", no.candidates, " candidates over ", no.rounds, " instant runoff rounds")
stages.plot <- stages |>
# Make bar plot for each round
ggplot(aes(x = name.label, y = value)) +
geom_bar(stat = "identity", color = "black", linewidth = .25, aes(fill = as.factor(color))) +
# Custom colors for each bar
scale_fill_manual(values = c(Eliminated = "#E54E21", Elected = "#6C8645", None = "#273046")) +
# Create individual grids for each round
facet_wrap(vars(stage)) +
# Add cutoffs for each round
geom_abline(data = cutoffs, aes(intercept = cutoff, slope = 0)) +
# Put names on Y axis and Votes on X for legibility
coord_flip() +
labs(
x = "Name",
y = "Votes",
fill = "",
title =  names(positions.names)[which(positions.names == position)],
subtitle = elaborate.subtitle,
caption = "*&ast;Incumbent*"
) +
theme_tufte() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
axis.text.y = ggtext::element_markdown(lineheight = .25),
plot.caption = ggtext::element_markdown(hjust = -.5),
legend.position = "bottom",
legend.key.size = unit(.5, "cm"),
strip.text.x = element_text(
size = 10, color = "#404040", face = "italic"
))
return(stages.plot)
}
get_results_plot(at.large.results) |> print()
get_results_plot <- function(rcv.results.to.plot, position = "large_senator", seats = 4){
# Tabulate results for each individual race
# every.result (tbl): long df of all results to pass to pivoted.results()
# position (str): name of position
# -> output (csv): output of vote::RCV() giving round results and winners
# -> results_plot (png): bar graph showing actions for each round
# Get cutoffs for each round
cutoffs <- tibble(cutoff = rcv.results.to.plot$quotas) |>
rowid_to_column(var = "stage")
# Create table of results and join to cutoffs
stages <- rcv.results.to.plot$preferences |>
as_tibble() |>
rowid_to_column(var = "stage") |>
pivot_longer(-stage) |>
left_join(cutoffs) |>
mutate(vote_delta = value - cutoff)
# Get number of IR rounds for plot title
no.rounds <- stages |> distinct(stage) |> nrow()
# Get number of candidates for plot title
no.candidates <- rcv.results.to.plot$preferences |> colnames() |> length()
# Elected candidates for each round are those candidates whose vote count is largest
# compared to the cutoff
elected <- stages |>
group_by(stage) |>
filter(vote_delta == max(vote_delta)) |>
filter(value > cutoff) |>
select(stage, name) |>
mutate(action = "Elected")
# Eliminated candidates for each round are those whose vote count is smallest
# compared to the cutofff
eliminated <- stages |>
group_by(stage) |>
filter(vote_delta == min(vote_delta)) |>
select(stage, name) |>
mutate(action = "Eliminated")
# Lookup vector for position names for plot title
positions.names <- c(
"International Senator" = "international_senator",
"Fourth Year Senator" = "fourth_senator",
"Third Year Senator" = "third_senator",
"Second Year Senator" = "second_senator",
"At Large Senator" = "large_senator"
)
incumbents <- read_csv("senators23-24.csv", show_col_types = FALSE) |> pull(Name)
# Plot the results
stages <- stages |>
# Join with elected and eliminated tables and create color columns
left_join(elected) |>
left_join(eliminated, by = c("stage", "name")) |>
mutate(color = coalesce(action.x, action.y)) |>
mutate(color = replace_na(color, "None"))  |>
mutate(name = str_replace(name, "Suyash SR", "Suyash-SR")) |>
mutate(name.label = str_split_i(name, pattern = " ", i = 2)) |>
mutate(name.label = case_when(
name %in% elected$name ~ paste0("**", name.label, "**"),
.default = name.label
)) |>
mutate(name.label = case_when(
(name %in% incumbents) ~ paste0(name.label, "&ast;"),
.default = name.label
))
elaborate.subtitle <- paste0(seats, " senators elected from ", no.candidates, " candidates over ", no.rounds, " instant runoff rounds")
stages.plot <- stages |>
# Make bar plot for each round
ggplot(aes(x = name.label, y = value)) +
geom_bar(stat = "identity", color = "black", linewidth = .25, aes(fill = as.factor(color))) +
# Custom colors for each bar
scale_fill_manual(values = c(Eliminated = "#E54E21", Elected = "#6C8645", None = "#273046")) +
# Create individual grids for each round
facet_wrap(vars(stage)) +
# Add cutoffs for each round
geom_abline(data = cutoffs, aes(intercept = cutoff, slope = 0)) +
# Put names on Y axis and Votes on X for legibility
coord_flip() +
labs(
x = "Name",
y = "Votes",
fill = "",
title =  names(positions.names)[which(positions.names == position)],
subtitle = elaborate.subtitle,
caption = "*&ast;Incumbent*"
) +
theme_tufte() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
axis.text.y = ggtext::element_markdown(lineheight = .25),
plot.caption = ggtext::element_markdown(hjust = 0),
legend.position = "bottom",
legend.key.size = unit(.5, "cm"),
strip.text.x = element_text(
size = 10, color = "#404040", face = "italic"
))
return(stages.plot)
}
get_results_plot(at.large.results) |> print()
at.large.results |>
rank_distribution_plot()
get_position_name <- function(cleaned.position.name){
# Lookup vector for position names for plot title
positions.names <- c(
"International Senator" = "international_senator",
"Fourth Year Senator" = "fourth_senator",
"Third Year Senator" = "third_senator",
"Second Year Senator" = "second_senator",
"At Large Senator" = "large_senator"
)
return(names(positions.names)[which(positions.names == cleaned.position.name)])
}
get_results_plot <- function(rcv.results.to.plot, position = "large_senator", seats = 4){
# Tabulate results for each individual race
# every.result (tbl): long df of all results to pass to pivoted.results()
# position (str): name of position
# -> output (csv): output of vote::RCV() giving round results and winners
# -> results_plot (png): bar graph showing actions for each round
# Get cutoffs for each round
cutoffs <- tibble(cutoff = rcv.results.to.plot$quotas) |>
rowid_to_column(var = "stage")
# Create table of results and join to cutoffs
stages <- rcv.results.to.plot$preferences |>
as_tibble() |>
rowid_to_column(var = "stage") |>
pivot_longer(-stage) |>
left_join(cutoffs) |>
mutate(vote_delta = value - cutoff)
# Get number of IR rounds for plot title
no.rounds <- stages |> distinct(stage) |> nrow()
# Get number of candidates for plot title
no.candidates <- rcv.results.to.plot$preferences |> colnames() |> length()
# Elected candidates for each round are those candidates whose vote count is largest
# compared to the cutoff
elected <- stages |>
group_by(stage) |>
filter(vote_delta == max(vote_delta)) |>
filter(value > cutoff) |>
select(stage, name) |>
mutate(action = "Elected")
# Eliminated candidates for each round are those whose vote count is smallest
# compared to the cutofff
eliminated <- stages |>
group_by(stage) |>
filter(vote_delta == min(vote_delta)) |>
select(stage, name) |>
mutate(action = "Eliminated")
incumbents <- read_csv("senators23-24.csv", show_col_types = FALSE) |> pull(Name)
# Plot the results
stages <- stages |>
# Join with elected and eliminated tables and create color columns
left_join(elected) |>
left_join(eliminated, by = c("stage", "name")) |>
mutate(color = coalesce(action.x, action.y)) |>
mutate(color = replace_na(color, "None"))  |>
mutate(name = str_replace(name, "Suyash SR", "Suyash-SR")) |>
mutate(name.label = str_split_i(name, pattern = " ", i = 2)) |>
mutate(name.label = case_when(
name %in% elected$name ~ paste0("**", name.label, "**"),
.default = name.label
)) |>
mutate(name.label = case_when(
(name %in% incumbents) ~ paste0(name.label, "&ast;"),
.default = name.label
))
elaborate.subtitle <- paste0(seats, " senators elected from ", no.candidates, " candidates over ", no.rounds, " instant runoff rounds")
stages.plot <- stages |>
# Make bar plot for each round
ggplot(aes(x = name.label, y = value)) +
geom_bar(stat = "identity", color = "black", linewidth = .25, aes(fill = as.factor(color))) +
# Custom colors for each bar
scale_fill_manual(values = c(Eliminated = "#E54E21", Elected = "#6C8645", None = "#273046")) +
# Create individual grids for each round
facet_wrap(vars(stage)) +
# Add cutoffs for each round
geom_abline(data = cutoffs, aes(intercept = cutoff, slope = 0)) +
# Put names on Y axis and Votes on X for legibility
coord_flip() +
labs(
x = "Name",
y = "Votes",
fill = "",
title = get_position_name(position),
subtitle = elaborate.subtitle,
caption = "*&ast;Incumbent*"
) +
theme_tufte() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
axis.text.y = ggtext::element_markdown(lineheight = .25),
plot.caption = ggtext::element_markdown(hjust = 0),
legend.position = "bottom",
legend.key.size = unit(.5, "cm"),
strip.text.x = element_text(
size = 10, color = "#404040", face = "italic"
))
return(stages.plot)
}
get_results_plot(international.results, position = "international_senator")
rank_distribution_plot <- function(results.df, position = "large_senator"){
results.df$data |>
as_tibble() |>
pivot_longer(everything()) |>
mutate(name = if_else(name %in% results.df$elected, paste0("**", name, "**"), name)) |>
filter(value != 0) |>
ggplot() +
geom_bar(aes(x = value, fill = name), color = "black", linewidth = .24) +
facet_wrap(vars(name)) +
theme_tufte() +
scale_fill_manual(values =  c("#D87CAC", "#009FB7", "#e54e21ff", "#6c8645ff", "#273046ff", "#ffbd00ff", "#9e0059ff")) +
scale_x_continuous(breaks = seq.int(1, length(colnames(results.df$data)), by = 1)) +
labs(
title = get_position_name(position),
subtitle = "Choice distribution for each candidate",
x = "Rank",
y = "Count",
fill = ""
) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
axis.text.y = ggtext::element_markdown(lineheight = .25),
plot.caption = ggtext::element_markdown(),
legend.position = "none",
strip.text.x = ggtext::element_markdown())
}
at.large.results |>
rank_distribution_plot()
tibble(Candidate = results.df$elected) |>
rowid_to_column("Elected") |>
kbl(booktabs = T) |>
kable_styling(position = "center")
source("sp_24_tabulate.R")
library(kableExtra)
source("sp_24_tabulate.R")
at.large.results <- rcv.results()
get_results_table(at.large.results)
tibble(Candidate = results.df$elected) |>
rowid_to_column("Elected") |>
kbl(booktabs = T) |>
kable_styling(position = "center", latex_options = "HOLD_position")
source("sp_24_tabulate.R")
at.large.results <- rcv.results()
get_results_table(at.large.results)
source("sp_24_tabulate.R")
at.large.results |>
rank_distribution_plot(position = "at_large")
at.large.results |>
rank_distribution_plot(position = "large_senator")
at.large.results |>
rank_distribution_plot(position = "second_senator")
at.large.results |>
rank_distribution_plot(position = "third_senator")
at.large.results |>
rank_distribution_plot(position = "international_senator")
rcv.results("fourth_senator")
rcv.results(position = "fourth_senator")
rcv.results(position = "fourth_senator", seats = 3)
results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results
fourth.year.results$data
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator")
?rcv
vote()
library(vote)
?irv
?rcv
?stv
fourth.year.results$elected
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator")
rank_distribution_plot <- function(results.df, position = "large_senator", bold.winners = T){
results.df$data |>
as_tibble() |>
pivot_longer(everything()) |>
mutate(name = if_else((name %in% results.df$elected) & bold.winners, paste0("**", name, "**"), name)) |>
filter(value != 0) |>
ggplot() +
geom_bar(aes(x = value, fill = name), color = "black", linewidth = .24) +
facet_wrap(vars(name)) +
theme_tufte() +
scale_fill_manual(values =  c("#D87CAC", "#009FB7", "#e54e21ff", "#6c8645ff", "#273046ff", "#ffbd00ff", "#9e0059ff")) +
scale_x_continuous(breaks = seq.int(1, length(colnames(results.df$data)), by = 1)) +
labs(
title = get_position_name(position),
subtitle = "Choice distribution for each candidate",
x = "Rank",
y = "Count",
fill = ""
) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
axis.text.y = ggtext::element_markdown(lineheight = .25),
plot.caption = ggtext::element_markdown(),
legend.position = "none",
strip.text.x = ggtext::element_markdown())
}
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
rank_distribution_plot <- function(results.df, position = "large_senator", bold.winners = T){
results.df$data |>
as_tibble() |>
pivot_longer(everything()) |>
mutate(name = if_else((name %in% results.df$elected) & bold.winners, paste0("**", name, "**"), name)) |>
filter(value != 0) |>
ggplot() +
geom_bar(aes(x = value, fill = name), color = "black", linewidth = .24) +
facet_wrap(vars(name)) +
theme_tufte() +
scale_fill_manual(values =  c("#D87CAC", "#009FB7", "#e54e21ff", "#6c8645ff", "#273046ff", "#ffbd00ff", "#9e0059ff")) +
scale_x_continuous(breaks = seq.int(1, length(colnames(results.df$data)), by = 1)) +
labs(
title = get_position_name(position),
subtitle = "Choice distribution for each candidate",
x = "Rank",
y = "Count",
fill = ""
) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
axis.text.y = ggtext::element_markdown(lineheight = .25),
plot.caption = ggtext::element_markdown(),
legend.position = "none",
strip.text.x = ggtext::element_markdown(strip.position="right"))
}
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
rank_distribution_plot <- function(results.df, position = "large_senator", bold.winners = T){
results.df$data |>
as_tibble() |>
pivot_longer(everything()) |>
mutate(name = if_else((name %in% results.df$elected) & bold.winners, paste0("**", name, "**"), name)) |>
filter(value != 0) |>
ggplot() +
geom_bar(aes(x = value, fill = name), color = "black", linewidth = .24) +
facet_wrap(vars(name), strip.position="right") +
theme_tufte() +
scale_fill_manual(values =  c("#D87CAC", "#009FB7", "#e54e21ff", "#6c8645ff", "#273046ff", "#ffbd00ff", "#9e0059ff")) +
scale_x_continuous(breaks = seq.int(1, length(colnames(results.df$data)), by = 1)) +
labs(
title = get_position_name(position),
subtitle = "Choice distribution for each candidate",
x = "Rank",
y = "Count",
fill = ""
) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
axis.text.y = ggtext::element_markdown(lineheight = .25),
plot.caption = ggtext::element_markdown(),
legend.position = "none",
strip.text.x = ggtext::element_markdown(strip.position="right"))
}
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
source("sp_24_tabulate.R")
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
source("sp_24_tabulate.R")
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
fourth.year.results$elected
colnames(fourth.year.results$data)
order(colnames(fourth.year.results$data), fourth.year.results$elected)
fourth.year.candidates <- colnames(fourth.year.results$data)
fourth.year.candidates
fourth.year.winners <- fourth.year.results$elected
fourth.year.winners
fourth.year.candidates[which(!fourth.year.candidates %in% fourth.year.winners)]
fourth.year.results <- rcv.results(position = "fourth_senator", seats = 3)
fourth.year.candidates <- colnames(fourth.year.results$data)
fourth.year.winners <- fourth.year.results$elected
c(
fourth.year.candidates,
fourth.year.candidates[which(!fourth.year.candidates %in% fourth.year.winners)]
)
fourth.year.results |>
rank_distribution_plot(position = "fourth_senator", bold.winners = F)
